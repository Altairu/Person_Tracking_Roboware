import rclpy
from rclpy.node import Node
from std_msgs.msg import Float32MultiArray, String

class RobowareNode(Node):
    def __init__(self):
        super().__init__('Roboware_node')
        self.mode = "STOP"
        self.target_right = 0.0
        self.target_left = 0.0

        self.create_subscription(String, 'web_socket_pub', self.command_callback, 10)
        self.create_subscription(Float32MultiArray, 'camera_data', self.follow_callback, 10)
        self.speed_publisher = self.create_publisher(Float32MultiArray, 'target_speeds', 10)

    def command_callback(self, msg):
        command = msg.data
        if command.startswith("MODE:"):
            self.mode = command.split(":")[1]
            self.get_logger().info(f"Mode switched to {self.mode}")
        elif command.startswith("SPEED:") and self.mode == "CONTROL":
            direction = command.split(":")[1]
            self.set_speeds(direction)

    def follow_callback(self, msg):
        if self.mode == "FOLLOW":
            distance, offset = msg.data
            if distance < 1.0:
                self.target_right = 0.0
                self.target_left = 0.0
            else:
                kp_distance = 200.0
                kp_offset = 2.0
                self.target_right = kp_distance * distance - kp_offset * offset
                self.target_left = kp_distance * distance + kp_offset * offset
            self.publish_speeds()

    def set_speeds(self, direction):
        speed = 500
        if direction == "FORWARD":
            self.target_right, self.target_left = speed, speed
        elif direction == "BACKWARD":
            self.target_right, self.target_left = -speed, -speed
        elif direction == "LEFT":
            self.target_right, self.target_left = speed, -speed
        elif direction == "RIGHT":
            self.target_right, self.target_left = -speed, speed
        elif direction == "STOP":
            self.target_right, self.target_left = 0.0, 0.0
        self.publish_speeds()

    def publish_speeds(self):
        msg = Float32MultiArray()
        msg.data = [float(self.target_right), float(self.target_left)]
        self.speed_publisher.publish(msg)
        self.get_logger().info(
            f"Published Speeds: Right={self.target_right}, Left={self.target_left}"
        )

def main(args=None):
    rclpy.init(args=args)
    node = RobowareNode()
    rclpy.spin(node)
    rclpy.shutdown()

if __name__ == "__main__":
    main()
