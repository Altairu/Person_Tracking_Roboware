import rclpy
from rclpy.node import Node
from std_msgs.msg import Float32MultiArray
import serial
import struct

class SerialSendNode(Node):
    def __init__(self):
        super().__init__('serial_send_node')
        self.subscription = self.create_subscription(
            Float32MultiArray,
            'wheel_controls',
            self.send_to_serial,
            10
        )

        self.port = "/dev/ttyACM0"  # シリアルポート
        self.baudrate = 115200  # ボーレート
        try:
            self.ser = serial.Serial(self.port, self.baudrate, timeout=0.1)
            self.get_logger().info(f"Connected to serial port: {self.port}")
        except serial.SerialException as e:
            self.get_logger().error(f"Serial connection failed: {e}")
            self.ser = None

    def send_to_serial(self, msg):
        if self.ser is not None:
            try:
                # 制御信号を取得
                right_signal, left_signal = map(int, msg.data)
                
                # データをパックして送信
                data = struct.pack('>BBhh', 0xA5, 0xA5, right_signal, left_signal)
                self.ser.write(data)

                # デバッグ情報を表示
                self.get_logger().info(f"Sent: Control Right={right_signal}, Control Left={left_signal}")
            except Exception as e:
                self.get_logger().error(f"Error sending data to serial: {e}")
        else:
            self.get_logger().error("Serial port not initialized.")

def main(args=None):
    rclpy.init(args=args)
    node = SerialSendNode()
    rclpy.spin(node)
    rclpy.shutdown()

if __name__ == '__main__':
    main()
