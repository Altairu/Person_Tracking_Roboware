import rclpy
from rclpy.node import Node
from std_msgs.msg import Float32MultiArray
import pyrealsense2 as rs
import cv2
import numpy as np
import torch

class RealSenseNode(Node):
    def __init__(self):
        super().__init__('RealSense_node')
        self.publisher = self.create_publisher(Float32MultiArray, 'camera_data', 10)
        
        # RealSense設定
        self.pipeline = rs.pipeline()
        config = rs.config()
        config.enable_stream(rs.stream.depth, 1280, 720, rs.format.z16, 30)
        config.enable_stream(rs.stream.color, 1280, 720, rs.format.bgr8, 30)
        self.pipeline.start(config)
        
        # YOLOモデルのロード
        self.model = torch.hub.load('ultralytics/yolov5', 'yolov5s', pretrained=True)
        self.create_timer(0.1, self.process_frames)

    def process_frames(self):
        frames = self.pipeline.wait_for_frames()
        depth_frame = frames.get_depth_frame()
        color_frame = frames.get_color_frame()
        if not depth_frame or not color_frame:
            return

        depth_image = np.asanyarray(depth_frame.get_data())
        color_image = np.asanyarray(color_frame.get_data())
        results = self.model(color_image)

        for *box, conf, cls in results.xyxy[0]:
            if int(cls) == 0:  # 'person' class
                x1, y1, x2, y2 = map(int, box)
                center_x, center_y = (x1 + x2) // 2, (y1 + y2) // 2

                # 人物の距離とオフセットを計算
                distance = float(depth_frame.get_distance(center_x, center_y))  # 確実にfloat型に変換
                offset_x = float(center_x - (color_image.shape[1] // 2))  # 画面中心とのオフセット

                # デバッグ用
                self.get_logger().info(f"Person detected. Distance: {distance:.2f}, Offset: {offset_x:.2f}")

                # データをパブリッシュ
                msg = Float32MultiArray()
                msg.data = [distance, offset_x]  # 必ずfloat型リストを設定
                self.publisher.publish(msg)

                # 可視化のための描画
                cv2.rectangle(color_image, (x1, y1), (x2, y2), (0, 255, 0), 2)
                cv2.putText(color_image, f'Distance: {distance:.2f}m', (x1, y1 - 10),
                            cv2.FONT_HERSHEY_SIMPLEX, 0.5, (0, 255, 0), 2)
                cv2.putText(color_image, f'Offset: {offset_x:.2f}px', (x1, y1 - 30),
                            cv2.FONT_HERSHEY_SIMPLEX, 0.5, (0, 255, 0), 2)
                break

        # 処理済みのフレームを表示
        cv2.imshow('RealSense', color_image)
        cv2.waitKey(1)

def main(args=None):
    rclpy.init(args=args)
    node = RealSenseNode()
    rclpy.spin(node)
    node.pipeline.stop()
    cv2.destroyAllWindows()
    rclpy.shutdown()

if __name__ == "__main__":
    main()
