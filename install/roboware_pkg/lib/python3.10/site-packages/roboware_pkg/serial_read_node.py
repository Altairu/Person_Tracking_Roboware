import rclpy
from rclpy.node import Node
from std_msgs.msg import Float32MultiArray
import serial
import struct

class SerialReadNode(Node):
    def __init__(self):
        super().__init__('serial_read_node')

        # シリアルポートの設定
        port = "/dev/ttyACM0"
        baudrate = 115200
        self.ser = None

        try:
            self.ser = serial.Serial(port, baudrate, timeout=0.1)
            self.get_logger().info(f"Connected to serial port: {port}")
        except serial.SerialException as e:
            self.get_logger().error(f"Serial connection error: {e}")
            return

        # パブリッシャーの作成
        self.pub = self.create_publisher(Float32MultiArray, 'wheel_feedback', 10)

        # タイマーでシリアル読み取りを定期実行
        self.timer = self.create_timer(0.01, self.read_serial)

    def read_serial(self):
        if self.ser is not None and self.ser.in_waiting >= 6:
            try:
                # シリアルデータの読み取り
                received_data = self.ser.read(6)
                if len(received_data) == 6:
                    if received_data[0] == 0xA5 and received_data[1] == 0xA5:
                        _, _, right_speed, left_speed = struct.unpack('>BBhh', received_data)

                        # データのパブリッシュ
                        msg = Float32MultiArray()
                        msg.data = [float(right_speed), float(left_speed)]
                        self.pub.publish(msg)

                        # ログ出力
                        self.get_logger().info(
                            f"Received: Right Speed={right_speed}, Left Speed={left_speed}"
                        )
                    else:
                        self.get_logger().warn("Invalid header in received data.")
                else:
                    self.get_logger().warn("Incomplete data received.")
            except Exception as e:
                self.get_logger().error(f"Error reading serial data: {e}")
        else:
            self.get_logger().debug("No data available on serial port.")

    def destroy_node(self):
        if self.ser and self.ser.is_open:
            self.ser.close()
            self.get_logger().info("Closed serial connection.")
        super().destroy_node()

def main(args=None):
    rclpy.init(args=args)
    node = SerialReadNode()
    rclpy.spin(node)
    node.destroy_node()
    rclpy.shutdown()

if __name__ == '__main__':
    main()
